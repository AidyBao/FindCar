//
//  ZXPersonalCenterViewController.swift
//  FindCar
//
//  Created by screson on 2017/12/15.
//  Copyright © 2017年 screson. All rights reserved.
//

import UIKit

class ZXPersonalCenterViewController: ZXUIViewController {
    
    @IBOutlet weak var tblList: UITableView!
    var baseModel: ZXBaseInfoModel = ZXBaseInfoModel()
    var taskModel: ZXTaskModel = ZXTaskModel()
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nil)
        self.hidesBottomBarWhenPushed = false
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        self.hidesBottomBarWhenPushed = false
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()

        // Do any additional setup after loading the view.
        
        self.tblList.register(UINib.init(nibName: ZXPersonalInfoCell.NibName, bundle: nil), forCellReuseIdentifier: ZXPersonalInfoCell.reuseIdentifier)
        self.tblList.register(UINib.init(nibName: ZXTaskTableViewCell.NibName, bundle: nil), forCellReuseIdentifier: ZXTaskTableViewCell.reuseIdentifier)
        self.tblList.register(UINib.init(nibName: ZXSettingCell.NibName, bundle: nil), forCellReuseIdentifier: ZXSettingCell.reuseIdentifier)
        self.tblList.backgroundColor = UIColor.zx_subTintColor
        if #available(iOS 11.0, *) {
            self.tblList.contentInsetAdjustmentBehavior = .never
        } else {
            // Fallback on earlier versions
            self.automaticallyAdjustsScrollViewInsets = false
            self.edgesForExtendedLayout = []
        }
        self.tblList.zx_addHeaderRefresh(showGif: true, target: self, action: #selector(zx_refresh))
        //self.tblList.mj_header.backgroundColor = UIColor.white
        
        zx_refresh()
    }
    
    override func zx_refresh() {
        requestForPersonalInfro()
        requestForGetNewTask()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        if let last = self.navigationController?.viewControllers.last,last == self  {
            self.navigationController?.setNavigationBarHidden(true, animated: false)
        } else {            
            self.navigationController?.setNavigationBarHidden(true, animated: true)
        }
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        if let last = self.navigationController?.viewControllers.last,last == self  {
            return
        } else {
            self.navigationController?.setNavigationBarHidden(false, animated: true)
        }
    }
}

//MARK: - UITableViewDelegate
extension ZXPersonalCenterViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if indexPath.section == 1 {//全部任务
            if indexPath.row == 0 {
                let vc = ZXAllTaskViewController()
                self.navigationController?.pushViewController(vc, animated: true)
            }
        } else if indexPath.section == 2 {//选中最新任务
            if !self.taskModel.taskId.isEmpty {
                let detail = ZXTaskDetailViewController()
                detail.taskId = self.taskModel.taskId
                self.navigationController?.pushViewController(detail, animated: true)
            } else {
                ZXHUD.showFailure(in: self.view, text: "任务ID为空", delay: ZXHUD.DelayTime)
            }
        } else if indexPath.section == 3 {
            switch indexPath.row {
            case 0:
                let vc = ZXMessageViewController()
                 self.navigationController?.pushViewController(vc, animated: true)
            case 1:
                let vc = ZXFocusViewController()
                self.navigationController?.pushViewController(vc, animated: true)
            case 2:
                let vc = ZXSettingViewController()
                self.navigationController?.pushViewController(vc, animated: true)
            default:
                break
            }
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.section {
        case 0://个人信息
            return ZXPersonalInfoCell.height
        case 1://全部任务
            return ZXSettingCell.height
        case 2://最新单个任务
            return self.taskModel.zx_hasUploadAuthority ? ZXTaskTableViewCell.height : ZXTaskTableViewCell.height_noControl
        case 3://设置
            return ZXSettingCell.height
        default:
            break
        }
        return 0
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return CGFloat.leastNormalMagnitude
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        switch section {
        case 0:
            return 15
        case 2:
            return 15
        default:
            break
        }
        return CGFloat.leastNormalMagnitude
    }
}
//MARK: - UITableViewDataSource
extension ZXPersonalCenterViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.section {
        case 0://匹配信息
            let cell = tableView.dequeueReusableCell(withIdentifier: ZXPersonalInfoCell.reuseIdentifier, for: indexPath) as! ZXPersonalInfoCell
            return cell
        case 1://全部任务
            let cell = tableView.dequeueReusableCell(withIdentifier: ZXSettingCell.reuseIdentifier, for: indexPath) as! ZXSettingCell
            cell.imgIcon.image = #imageLiteral(resourceName: "task")
            cell.lbTtitle.text = "全部任务"
            return cell
        case 2://最新任务
            let cell = tableView.dequeueReusableCell(withIdentifier: ZXTaskTableViewCell.reuseIdentifier, for: indexPath) as! ZXTaskTableViewCell
            cell.contentView.backgroundColor = UIColor.white
            cell.delegate = self
            cell.reloadData(model: self.taskModel, canControl: true)
            return cell
        case 3:
            let cell = tableView.dequeueReusableCell(withIdentifier: ZXSettingCell.reuseIdentifier, for: indexPath) as! ZXSettingCell
            cell.imgIcon.image = nil
            switch indexPath.row {
            case 0:
                cell.imgIcon.image = #imageLiteral(resourceName: "news")
                cell.lbTtitle.text = "消息"
            case 1:
                cell.imgIcon.image = #imageLiteral(resourceName: "follow")
                cell.lbTtitle.text = "关注"
            case 2:
                cell.imgIcon.image = #imageLiteral(resourceName: "setup")
                cell.lbTtitle.text = "设置"
            default:
                cell.lbTtitle.text = ""
            }
            return cell
        default:
            break
        }
        return UITableViewCell.init()
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch section {
        case 0://匹配信息
            return 1
        case 1://全部任务
            return 1
        case 2://最新任务
            if self.taskModel.taskId.isEmpty {
                return 0
            }
            return 1
        case 3:
            return 3
        default:
            return 0
        }
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 4
    }
}

//MARK: - Button Control Action
extension ZXPersonalCenterViewController: ZXTaskTableViewCellDelegate {
    func zxTaskTableViewCell(_ cell: ZXTaskTableViewCell, controlActionType: ZXTaskControlType, model: ZXTaskModel?, inputPlateNumber: String?) {
        switch controlActionType {
        case .uploadCarInfo://上传车辆信息
            let uploadCarInfoVC = ZXUploadCarInfoViewController()
            uploadCarInfoVC.taskId = self.taskModel.taskId
            self.navigationController?.pushViewController(uploadCarInfoVC, animated: true)
        case .verifyCarInfo://验证车辆信息
            let verifyCarInfoVC = ZXVerifyCarInfoViewController()
            verifyCarInfoVC.taskId = self.taskModel.taskId
            verifyCarInfoVC.ocrNumber = self.taskModel.plateNumber
            verifyCarInfoVC.inputNumber = inputPlateNumber
            self.navigationController?.pushViewController(verifyCarInfoVC, animated: true)
        case .handOverCar://交接车辆
            let verifyGetCarCode = ZXInputGetCarCodeViewController()
            verifyGetCarCode.taskId = self.taskModel.taskId
            self.present(verifyGetCarCode, animated: true, completion: nil)
        case .uploadSheet://上传交接单
            let uploadHandOverSheet = ZXUploadTakeOverSheetViewController()
            uploadHandOverSheet.taskId = self.taskModel.taskId
            self.navigationController?.pushViewController(uploadHandOverSheet, animated: true)
        default:
            break
        }
    }
    
    func zxTaskTableViewCellShareAction(_ cell: ZXTaskTableViewCell, model: ZXTaskModel?) {
        if model != nil {
            ZXShare.shareToWX(model!)
        }
    }
    
    func zxTaskTableViewCell(_ cell: ZXTaskTableViewCell, mark: Bool, model: ZXTaskModel?) {
        ZXHUD.showLoading(in: self.view, text: ZX_LOADING_TEXT, delay: ZX.HUDDelay)
        ZXFocusCenter.requestForUpdateFocus(focusId: Int((model?.taskId)!)!, taskStatus: mark ? 1 : 0, completion: { (code, succ, str) in
            ZXHUD.hide(for: self.view, animated: true)
            if code == ZXAPI_SUCCESS {
                let succStr = mark ? "收藏成功" : "取消收藏成功"
                ZXHUD.showSuccess(in: self.view, text: succStr, delay: ZX.HUDDelay)
//                let indexPath = self.listTableView.indexPath(for: cell)
//                if self.taskArr.count > 0 {
//                    let cellModel = self.taskArr[(indexPath?.row)!]
//                    cellModel.isFollow = mark ? 1 : 0
//                    self.listTableView.reloadData()
//                }
            }else{
                let errStr = mark ? "收藏失败" : "取消收藏失败"
                ZXHUD.showSuccess(in: self.view, text: errStr, delay: ZX.HUDDelay)
            }
        })
    }
}

extension ZXPersonalCenterViewController {
    func requestForUpdateFocus(_ focustId: Int, _ taskFlag: Int) {
        ZXHUD.showLoading(in: self.view, text: ZX_LOADING_TEXT, delay: ZX.HUDDelay)
        ZXFocusCenter.requestForUpdateFocus(focusId: focustId, taskStatus: taskFlag) { (code, succ, str) in
            if succ {
                ZXHUD.showSuccess(in: self.view, text: str, delay: ZX.HUDDelay)
            }else{
                ZXHUD.showFailure(in: self.view, text: str, delay: ZX.HUDDelay)
            }
        }
    }
    
    func requestForPersonalInfro() {
        ZXHUD.showLoading(in: self.view, text: ZX_LOADING_TEXT, delay: nil)
        ZXNetwork.asyncRequest(withUrl: ZXAPI.api(address: ZXAPIConst.Personal.baseInfo), params: ["tel":ZXUser.user.registeredTel], method: .post) { (succ, code, content, jsonStr, zxErr) in
            ZXHUD.hide(for: self.view, animated: true)
            self.tblList.mj_header.endRefreshing()
            if succ {
                if code == ZXAPI_SUCCESS {
                    if let data = content["data"] as? Dictionary<String,Any> {
                        self.baseModel = ZXBaseInfoModel.deserialize(from: data)!
                        self.tblList.reloadData()
                    }
                }else{
                    
                }
            }else if code != ZXAPI_LOGIN_INVALID {
                
            }
        }
    }
    
    func requestForGetNewTask() {
        ZXHUD.showLoading(in: self.view, text: ZX_LOADING_TEXT, delay: nil)
        ZXNetwork.asyncRequest(withUrl: ZXAPI.api(address: ZXAPIConst.Personal.getNewTask), params: nil, method: .post) { (succ, code, content, jsonStr, zxErr) in
            ZXHUD.hide(for: self.view, animated: true)
            self.tblList.mj_header.endRefreshing()
            if succ {
                if code == ZXAPI_SUCCESS {
                    if let data = content["data"] as? Dictionary<String,Any> {
                        self.taskModel = ZXTaskModel.deserialize(from: data)!
                        self.tblList.reloadData()
                    }
                }else{
                    
                }
            }else if code != ZXAPI_LOGIN_INVALID {
                
            }
        }
    }
}
