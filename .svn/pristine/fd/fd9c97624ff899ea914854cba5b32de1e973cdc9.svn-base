//
//  ZXAllTaskViewController+TableView.swift
//  FindCar
//
//  Created by 120v on 2018/1/8.
//  Copyright © 2018年 screson. All rights reserved.
//

import UIKit

extension ZXAllTaskViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let taskCell: ZXTaskTableViewCell = tableView.dequeueReusableCell(withIdentifier: ZXTaskTableViewCell.reuseIdentifier, for: indexPath) as! ZXTaskTableViewCell
        taskCell.delegate = self
        if perArray.count > 0 {
            taskCell.reloadData(model: perArray[indexPath.row],canControl: true)
        }
        return taskCell
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return perArray.count
    }
}

extension ZXAllTaskViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if perArray.count > 0 {
            let model = perArray[indexPath.row]
            let detail = ZXTaskDetailViewController()
            detail.taskId = model.taskId
            self.navigationController?.pushViewController(detail, animated: true)
        }
    }
    
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let model = perArray[indexPath.row]
        if model.zx_hasUploadAuthority {
            return ZXTaskTableViewCell.height
        }
        return ZXTaskTableViewCell.height_noControl
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 10.0
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return CGFloat.leastNormalMagnitude
    }
}

extension ZXAllTaskViewController: ZXTaskTableViewCellDelegate {
    
    func zxTaskTableViewCell(_ cell: ZXTaskTableViewCell, controlActionType: ZXTaskControlType, model: ZXTaskModel?, inputPlateNumber: String?) {
        if let model = model {
            switch model.zx_controlType {
            case .uploadCarInfo://上传车辆信息
                let uploadCarInfoVC = ZXUploadCarInfoViewController()
                uploadCarInfoVC.taskId = model.taskId
                self.navigationController?.pushViewController(uploadCarInfoVC, animated: true)
            case .verifyCarInfo://验证车辆信息
                //Cell 已处理先验证车牌情况
                let verifyCarInfoVC = ZXVerifyCarInfoViewController()
                verifyCarInfoVC.taskId = model.taskId
                verifyCarInfoVC.ocrNumber = model.plateNumber
                verifyCarInfoVC.inputNumber = inputPlateNumber
                self.navigationController?.pushViewController(verifyCarInfoVC, animated: true)
            case .handOverCar://交接车辆
                let verifyGetCarCode = ZXInputGetCarCodeViewController()
                verifyGetCarCode.taskId = model.taskId
                self.present(verifyGetCarCode, animated: true, completion: nil)
            case .uploadSheet://上传交接单
                let uploadHandOverSheet = ZXUploadTakeOverSheetViewController()
                uploadHandOverSheet.taskId = model.taskId
                self.navigationController?.pushViewController(uploadHandOverSheet, animated: true)
            default:
                break
            }
        } else {
            ZXHUD.showFailure(in: self.view , text: "无可操作数据", delay: ZXHUD.DelayTime)
        }
    }
    
   
    func zxTaskTableViewCellShareAction(_ cell: ZXTaskTableViewCell, model: ZXTaskModel?) {
        if model != nil {
            ZXShare.shareToWX(model!)
        }
    }
    
    func zxTaskTableViewCell(_ cell: ZXTaskTableViewCell, mark: Bool, model: ZXTaskModel?) {
        ZXHUD.showLoading(in: self.view, text: ZX_LOADING_TEXT, delay: ZX.HUDDelay)
        ZXFocusCenter.requestForUpdateFocus(focusId: Int((model?.taskId)!)!, taskStatus: mark ? 1 : 0, completion: { (code, succ, str) in
            ZXHUD.hide(for: self.view, animated: true)
            if code == ZXAPI_SUCCESS {
                let succStr = mark ? "关注成功" : "取消关注成功"
                ZXHUD.showSuccess(in: self.view, text: succStr, delay: ZX.HUDDelay)
                let indexPath = self.tabList.indexPath(for: cell)
                if self.perArray.count > 0 {
                    self.perArray.remove(at: (indexPath?.row)!)
                    self.tabList.reloadData()
                }
            }else{
                let errStr = mark ? "关注失败" : "取消关注失败"
                ZXHUD.showSuccess(in: self.view, text: errStr, delay: ZX.HUDDelay)
            }
        })
    }
}



