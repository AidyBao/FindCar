//
//  ZXHomePageViewController+Table.swift
//  FindCar
//
//  Created by 120v on 2017/12/28.
//  Copyright © 2017年 screson. All rights reserved.
//

import UIKit

extension ZXHomePageViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        var headerH: CGFloat = 0
        switch section {
        case 0:
            headerH = ZXHomeCellH.navH
        case 1:
            headerH = ZXHomeCellH.toolH + 10
        default:
            break
        }
      return headerH
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return CGFloat.leastNormalMagnitude
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        switch section {
        case 0:
            let headerView:ZXTaskNavView = tableView.dequeueReusableHeaderFooterView(withIdentifier: ZXTaskNavView.ZXTaskNavViewID) as! ZXTaskNavView
            headerView.delegate = self
            headerView.reload(msgCount)
            return headerView
        case 1:
            let headerView:ZXTaskToolCell = tableView.dequeueReusableHeaderFooterView(withIdentifier: ZXTaskToolCell.ZXTaskToolCellID) as! ZXTaskToolCell
            headerView.delegate = self
            return headerView
        default:
            return nil
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        var cellH: CGFloat = 0.0
        switch indexPath.section {
        case 0:
            cellH = ZXBOUNDS_WIDTH * 0.35
        case 1:
            cellH = ZXTaskTableViewCell.height
        default:
            break
        }
        return cellH
    }
}

extension ZXHomePageViewController: UITableViewDataSource {

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.section {
        case 0:
            let bannerCell: ZXTaskBannerCell = tableView.dequeueReusableCell(withIdentifier: ZXTaskBannerCell.ZXTaskBannerCellID, for: indexPath) as! ZXTaskBannerCell
            bannerCell.delegate = self
            if bannerArr.count > 0 {
                bannerCell.loadData(bannerArr)
            }
            return bannerCell
        case 1:
            let rootCell = tableView.dequeueReusableCell(withIdentifier: ZXTaskTableViewCell.reuseIdentifier, for: indexPath) as! ZXTaskTableViewCell
            rootCell.delegate = self
            if taskArr.count > 0 {
                rootCell.reloadData(model: taskArr[indexPath.row])
            }
            return rootCell
        default:
            return UITableViewCell.init(style: .default, reuseIdentifier: "UNKnow")
        }
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 2
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        var cellCount: Int = 0
        switch section {
        case 0:
            cellCount = 1
        case 1:
            cellCount = taskArr.count
        default:
            break
        }
        return cellCount
    }
}

extension ZXHomePageViewController: ZXTaskTableViewCellDelegate {
    func zxTaskTableViewCellShareAction(_ cell: ZXTaskTableViewCell, model: ZXTaskModel?) {
        ZXUser.checkLogin {
            if model != nil {
                ZXShare.shareToWX(taskModel: model!, wxScene: WXSceneSession, shareType:.help)
            }
        }
    }
    
    func zxTaskTableViewCell(_ cell: ZXTaskTableViewCell, mark: Bool, model: ZXTaskModel?) {
        ZXUser.checkLogin {
            ZXHUD.showLoading(in: self.view, text: ZX_LOADING_TEXT, delay: ZX.HUDDelay)
            ZXFocusCenter.requestForUpdateFocus(focusId: Int((model?.taskId)!)!, taskStatus: mark ? 1 : 0, completion: { (code, succ, str) in
                ZXHUD.hide(for: self.view, animated: true)
                if code == ZXAPI_SUCCESS {
                    let succStr = mark ? "已关注" : "已取消关注"
                    ZXHUD.showSuccess(in: self.view, text: succStr, delay: ZX.HUDDelay)
                    let indexPath = self.listTableView.indexPath(for: cell)
                    if self.taskArr.count > 0 {
                        let cellModel = self.taskArr[(indexPath?.row)!]
                        cellModel.isFollow = mark ? 1 : 0
                        self.listTableView.reloadRows(at: [indexPath!], with: .none)
                    }
                }else{
                    let errStr = mark ? "已关注" : "已取消关注"
                    ZXHUD.showSuccess(in: self.view, text: errStr, delay: ZX.HUDDelay)
                }
            })
        }
    }
}


//MARK: - BannerDelegate
extension ZXHomePageViewController: ZXTaskBannerCellDelegate {
    func didSelectedBannerCell(_ bId: Int,_ title: String) {
        
        self.dismiss(ZXStatusButton())
        
        if bId != -1 {
            requestForBanerDetail(bId)
        }else{
            ZXHUD.showFailure(in: self.view, text: "访问地址不存在", delay: ZX.HUDDelay)
        }
    }
}

extension ZXHomePageViewController: ZXTaskToolCellDelegate {
    func didTaskToolAction(_ sender: ZXStatusButton) {
        
        //
        let rc = sender.superview?.convert(sender.frame, to: self.view)
        screenViewY = (rc?.origin.y)! + (rc?.size.height)! 
        let viewF: CGRect = CGRect.init(x: 0, y: screenViewY, width: ZXBOUNDS_WIDTH, height: ZXBOUNDS_HEIGHT - screenViewY)
        
        ZXUser.checkLogin {
            //
            switch sender.tag {
            case ZXTaskToolCell.ZXTaskButtonTag.defaultBtn: //默认排序
                if self.ageShow {
                    self.agencyView?.dismiss()
                    self.ageShow = false
                }
                
                if self.addShow {
                    self.addressView?.dismiss()
                    self.addShow = false
                }
                
                if self.taskShow {
                    self.taskView?.dismiss()
                    self.taskShow = false
                }
                
                if self.defShow {
                    self.defaultView?.dismiss()
                    self.defShow = false
                    return
                }
                self.defaultView = ZXDefaultView.loadNib()
                self.defaultView?.frame = viewF
                ZXRootController.appWindow()?.addSubview(self.defaultView!)
                self.defaultView?.setDefaultValue(self.sortId)
                self.defShow = true
                self.defaultView?.block = {isDismiss,seleId in
                    self.defaultView?.dismiss()
                    sender.zx_isSelected(false)
                    self.defShow = false
                    
                    if self.sortId != seleId {
                        
                        self.sortId = seleId
                        
                        if self.sortId != 1 {
                            sender.zx_isSelected(true)
                        }else{
                            sender.zx_isSelected(false)
                        }
                        
                        self.currentPage = 1
                        self.requestForTaskList(true)
                    }else{
                        if self.sortId != 1 {
                            sender.zx_isSelected(true)
                        }else{
                            sender.zx_isSelected(false)
                        }
                    }
                }
                
            case ZXTaskToolCell.ZXTaskButtonTag.agentBtn://代理费
                if self.defShow {
                    self.defaultView?.dismiss()
                    self.defShow = false
                }
                
                if self.addShow {
                    self.addressView?.dismiss()
                    self.addShow = false
                }
                
                if self.taskShow {
                    self.taskView?.dismiss()
                    self.taskShow = false
                }
                
                if self.ageShow {
                    self.agencyView?.dismiss()
                    self.ageShow = false
                    return
                }
                
                self.agencyView = ZXAgencyView.loadNib()
                self.agencyView?.frame = viewF
                ZXRootController.appWindow()?.addSubview(self.agencyView!)
                self.agencyView?.setDefaultValue(self.minValue, self.maxValue,self.agencyIndex)
                self.ageShow = true
                self.agencyView?.block = {agView,minVal,maxVal,btnInx in
                    self.agencyView?.dismiss()
                    sender.zx_isSelected(false)
                    self.ageShow = false
                    if self.minValue != minVal || self.maxValue != maxVal {
                        
                        self.minValue = minVal
                        self.maxValue = maxVal
                        
                        self.agencyIndex = btnInx
                        
                        if self.agencyIndex != ZXAgencyView.ZXAgencyBtnTag.NoLimit {
                            sender.zx_isSelected(true)
                        }else{
                            sender.zx_isSelected(false)
                        }
                        
                        self.currentPage = 1
                        self.requestForTaskList(true)
                    }else{
                        if self.agencyIndex != ZXAgencyView.ZXAgencyBtnTag.NoLimit {
                            sender.zx_isSelected(true)
                        }else{
                            sender.zx_isSelected(false)
                        }
                    }
                }
            case ZXTaskToolCell.ZXTaskButtonTag.locationBtn://归属地
                
                if self.areaArr.count == 0 {
                    ZXHUD.showFailure(in: self.view, text: "暂无相关数据", delay: ZXHUD.DelayTime)
                    return
                }
                
                if self.defShow {
                    self.defaultView?.dismiss()
                    self.defShow = false
                }
                
                if self.ageShow {
                    self.agencyView?.dismiss()
                    self.ageShow = false
                }
                
                if self.taskShow {
                    self.taskView?.dismiss()
                    self.taskShow = false
                }
                
                if self.addShow {
                    self.addressView?.dismiss()
                    self.addShow = false
                    return
                }
                self.addressView = ZXAddressView.loadNib()
                self.addressView?.frame = viewF
                ZXRootController.appWindow()?.addSubview(self.addressView!)
                self.addressView?.loadAddrData(self.areaArr,self.proId,self.proIndex,self.cityId,self.cityIndex)
                self.addShow = true
                self.addressView?.block = {agView,provinceId,provinceIndex,citId,citIndex in
                    self.addressView?.dismiss()
                    sender.zx_isSelected(false)
                    self.addShow = false
                    if self.proId != provinceId || self.cityId != citId {
                        
                        self.proId = provinceId
                        self.proIndex = provinceIndex
                        
                        self.cityId = citId
                        self.cityIndex = citIndex
                        
                        if self.proId != 0 || self.cityId != 0 {
                            sender.zx_isSelected(true)
                        }else{
                            sender.zx_isSelected(false)
                        }
                        
                        self.currentPage = 1
                        self.requestForTaskList(true)
                    }else{
                        if self.proId != 0 || self.cityId != 0 {
                            sender.zx_isSelected(true)
                        }else{
                            sender.zx_isSelected(false)
                        }
                    }
                }
            case ZXTaskToolCell.ZXTaskButtonTag.taskBtn://任务状态
                if self.defShow {
                    self.defaultView?.dismiss()
                    self.defShow = false
                }
                
                if self.ageShow {
                    self.agencyView?.dismiss()
                    self.ageShow = false
                }
                
                if self.addShow {
                    self.addressView?.dismiss()
                    self.addShow = false
                }
                
                if self.taskShow {
                    self.taskView?.dismiss()
                    self.taskShow = false
                    return
                }
                self.taskView = ZXTaskStatusView.loadNib()
                self.taskView?.frame = viewF
                ZXRootController.appWindow()?.addSubview(self.taskView!)
                self.taskView?.setDefaultValue(self.taskId)
                self.taskShow = true
                self.taskView?.block = {agView,seleId in
                    self.taskView?.dismiss()
                    sender.zx_isSelected(false)
                    self.taskShow = false
                    if self.taskId != seleId {
                        
                        self.taskId = seleId
                        
                        if self.taskId != 0 {
                            sender.zx_isSelected(true)
                        }else{
                            sender.zx_isSelected(false)
                        }
                        
                        self.currentPage = 1
                        self.requestForTaskList(true)
                    }else{
                        if self.taskId != 0 {
                            sender.zx_isSelected(true)
                        }else{
                            sender.zx_isSelected(false)
                        }
                    }
                }
            default:
                break
            }
        }
    }

}


