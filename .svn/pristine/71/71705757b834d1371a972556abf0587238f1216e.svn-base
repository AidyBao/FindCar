//
//  ZXRouter+RemoteNotification.swift
//  YDY_GJ_3_5
//
//  Created by screson on 2017/4/17.
//  Copyright © 2017年 screson. All rights reserved.
//

import UIKit

enum ZXRemoteNoticeType {
    case personalTask, followTask, message, unknown
}

class ApsModel: ZXModel {
    var alert:Any?  //支持iOS10
    var badge:Int = 0
    var title:String {
        get {
            if let alert = alert as? Dictionary<String,Any> {
                return (alert["title"] as? String) ?? "新消息"
            }
            return "新消息"
        }
    }
    
    var body:String {
        get {
            if let alert = alert as? String {
                return alert
            } else if let alert = alert as? Dictionary<String,Any> {
                return (alert["body"] as? String) ?? "新消息"
            }
            return ""
        }
    }
}

class ZXRemoteNoticeModel: ZXModel {
    static var lastNoticeInfo:Dictionary<String,Any>?
    var aps = ApsModel()
    var pushId = ""
    var extensionId = ""
    var pushType = ""       //文本
    
    var fromUserTap = false
    var noticeType:ZXRemoteNoticeType {
        get{
            if pushType == "task" {
                return  .personalTask
            } else if pushType == "taskMessage" {
                return  .followTask
            } else if pushType == "notice" {
                return  .message
            }
            return  .unknown
        }
    }
}


extension ZXRouter {
    
    static func showNotice(_ infoDic:Dictionary<String,Any>?) {
        if let infoDic = infoDic{
            let noticeModel = ZXRemoteNoticeModel.deserialize(from: infoDic)
            let rootvc = UIApplication.shared.keyWindow?.rootViewController
            if rootvc == ZXRootController.zx_tabbarVC() {
                var selectedVc = ZXRootController.zx_tabbarVC().selectedViewController
                var nav:UIViewController?
                if ZXRootController.zx_tabbarVC().presentedViewController != nil{
                    selectedVc = ZXRootController.zx_tabbarVC().presentedViewController
                }
                if let navVC = selectedVc as? UINavigationController {
                    nav = navVC
                    selectedVc = navVC.viewControllers.first
                }else{
                    nav = selectedVc?.navigationController
                }
                
                if selectedVc is ZXLoginViewController ||
                    selectedVc is ZXVerificationCodeViewController ||
                    selectedVc is ZXInvitationCodeViewController ||
                    selectedVc is ZXTakePhotoPageViewController ||
                    selectedVc is ConfirmViewController ||
                    selectedVc is ZXCardPlateConfirmViewController {
                    ZXRemoteNoticeModel.lastNoticeInfo = infoDic
                    return
                }
                
                if  nav is UINavigationController {
                    ZXRemoteNoticeModel.lastNoticeInfo = nil
                    if noticeModel?.noticeType == .unknown {
                        ZXAudioUtils.vibrate()
                        ZXAlertUtils.showAlert(withTitle: noticeModel?.aps.title, message: noticeModel?.aps.body)
                    } else {
                        if let noticeModel = noticeModel {
                            if ZXUser.user.isLogin {
                                ZXAudioUtils.vibrate()
                                var vc: UIViewController?
                                switch noticeModel.noticeType {
                                case .personalTask:
                                    vc = ZXAllTaskViewController()
                                case .followTask, .message:
                                    vc = ZXMessageViewController()
                                default: break
                                }
                                if let vc = vc {
                                    ZXRootController.selectedNav().pushViewController(vc, animated: true)
                                }
                            } else {
                                ZXLoginViewController.show()
                                ZXRemoteNoticeModel.lastNoticeInfo = infoDic
                                return
                            }
                        }
                    }
                } else {
                    ZXRemoteNoticeModel.lastNoticeInfo = infoDic
                    return
                }
            } else {
                ZXRemoteNoticeModel.lastNoticeInfo = infoDic
            }
        } else {
            ZXRemoteNoticeModel.lastNoticeInfo = nil
        }
    }

    static func checkLastCacheRemoteNotice() {
        self.showNotice(ZXRemoteNoticeModel.lastNoticeInfo)
    }
    
}
