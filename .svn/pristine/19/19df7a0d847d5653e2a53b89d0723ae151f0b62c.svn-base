//
//  ZXTaskTableViewCell.swift
//  FindCar
//
//  Created by screson on 2017/12/28.
//  Copyright © 2017年 screson. All rights reserved.
//

import UIKit

let ZX_PlateChecked_Notice  =   "ZX_PlateChecked_NoticeName"

enum ZXTaskControlType {
    case none
    case uploadCarInfo  //上传车辆信息
    case verifyCarInfo  //验证车辆信息
    case handOverCar    //交接车辆
    case uploadSheet    //上传交接单
    func description() -> String {
        switch self {
        case .uploadCarInfo:
            return "补充车辆信息"
        case .verifyCarInfo:
            return "验证车辆信息"
        case .handOverCar,.uploadSheet:
            return "交接车辆"
        default:
            return ""
        }
    }
}

protocol ZXTaskTableViewCellDelegate: class {
    
    /// 收藏、取消收藏操作
    ///
    /// - Parameters:
    ///   - cell: cell
    ///   - mark: true 收藏
    ///   - model: ZXTaskModel
    func zxTaskTableViewCell(_ cell: ZXTaskTableViewCell, mark: Bool, model: ZXTaskModel?)
    
    /// 分享操作
    ///
    /// - Parameters:
    ///   - cell: cell
    ///   - model: ZXTaskModel
    func zxTaskTableViewCellShareAction(_ cell: ZXTaskTableViewCell, model: ZXTaskModel?)
    
    /// 完善信息操作
    ///
    /// - Parameters:
    ///   - cell: cell
    ///   - controlActionType: ZXTaskConrolType
    ///   - model: ZXTaskModel
    ///   - inputPlateNumber: 验证车辆信息时,如果需要验证车牌,并且手动输入的车牌是不为nil
    func zxTaskTableViewCell(_ cell: ZXTaskTableViewCell, controlActionType: ZXTaskControlType, model: ZXTaskModel?, inputPlateNumber: String?)
}

extension ZXTaskTableViewCellDelegate {
    func zxTaskTableViewCell(_ cell: ZXTaskTableViewCell, mark: Bool, model: ZXTaskModel?){}
    func zxTaskTableViewCellShareAction(_ cell: ZXTaskTableViewCell, model: ZXTaskModel?){}
    func zxTaskTableViewCell(_ cell: ZXTaskTableViewCell, controlActionType: ZXTaskControlType, model: ZXTaskModel?, inputPlateNumber: String?){}
}

/// 任务CELL
class ZXTaskTableViewCell: ZXTableViewCell {
    
    weak var delegate: ZXTaskTableViewCellDelegate?
    
    static let height: CGFloat = 300
    static let height_noControl: CGFloat = 240
    
    //var showType: ZXTaskCellType = ZXTaskCellType.markShare
    
    @IBOutlet weak var rightOffset: NSLayoutConstraint!
    @IBOutlet weak var leftOffset: NSLayoutConstraint!
    
    
    @IBOutlet weak var zxContentView: UIView!
    //Header Info
    @IBOutlet weak var headerInfoView: UIView!
    @IBOutlet weak var vLine: UIView!
    @IBOutlet weak var lbStatus: UILabel!
    @IBOutlet weak var lbStatus1: UILabel!
    @IBOutlet weak var lbControlTips1: UILabel!
    @IBOutlet weak var lbAgentPrice: UILabel!
    
    //Car Type
    @IBOutlet weak var carTypeInfoView: UIView!
    @IBOutlet weak var lbCarTypeTitle: UILabel!
    @IBOutlet weak var lbCarTypeInfo: UILabel!
    
    //RegistLocation License Plate
    @IBOutlet weak var carPlateInfoView: UIView!
    @IBOutlet weak var lbLocationTitle: UILabel!
    @IBOutlet weak var lbLocation: UILabel!
    @IBOutlet weak var lbPlateTitle: UILabel!
    @IBOutlet weak var lbPlateNumber: UILabel!
    
    //Car Keys/Recipt
    @IBOutlet weak var carKeysInfoView: UIView!
    @IBOutlet weak var ccvList: UICollectionView!
    
    //Info Upload
    @IBOutlet weak var controlView: UIView!
    @IBOutlet weak var btnControlAction: UIButton!
    @IBOutlet weak var lbLeaveTime: UILabel!
    
    //Mark Share
    @IBOutlet weak var markShareView: UIView!
    @IBOutlet weak var btnMark: UIButton!
    @IBOutlet weak var btnShare: UIButton!
    
    let tagsTitle = ["行驶证扫描件", "产权证扫描件", "备用钥匙", "车辆发票", "借款合同"]
    
    
    @IBOutlet weak var btnShowCarTypePopTips: UIButton!
    @IBOutlet weak var btnShowPlacePopTips: UIButton!
    @IBOutlet weak var btnShowPlateNumPopTips: UIButton!
    
    
    
    override func awakeFromNib() {
        super.awakeFromNib()
        // Initialization code
        self.btnShowPlateNumPopTips.isEnabled = false
        self.lbStatus1.isHidden = true
        self.lbControlTips1.isHidden = true
        self.controlView.isHidden = true
        
        self.backgroundColor = .clear
        self.contentView.backgroundColor = .clear
        
        //进行中、代理费信息
        self.vLine.backgroundColor = UIColor.zx_tintColor
        self.lbStatus.textColor = UIColor.zx_tintColor
        self.lbStatus.font = UIFont.boldSystemFont(ofSize: UIFont.zx_titleFontSize - 1)
        
        self.lbStatus1.textColor = UIColor.zx_tintColor
        self.lbStatus1.font = UIFont.boldSystemFont(ofSize: UIFont.zx_titleFontSize - 1)
        
        self.lbControlTips1.textColor = UIColor.zx_tintColor
        self.lbControlTips1.font = UIFont.zx_bodyFont(UIFont.zx_bodyFontSize - 2)
        
        self.lbAgentPrice.font = UIFont.boldSystemFont(ofSize: UIFont.zx_titleFontSize - 1)
        self.lbAgentPrice.textColor = UIColor.zx_customAColor
        
        //车型
        self.lbCarTypeTitle.font = UIFont.zx_bodyFont(UIFont.zx_bodyFontSize - 2)
        self.lbCarTypeTitle.textColor = UIColor.zx_textColorMark
        
        self.lbCarTypeInfo.font = UIFont.zx_bodyFont
        self.lbCarTypeInfo.textColor = UIColor.zx_textColorBody
        
        //归属地 车牌
        self.lbLocationTitle.font = UIFont.zx_bodyFont(UIFont.zx_bodyFontSize - 2)
        self.lbLocationTitle.textColor = UIColor.zx_textColorMark
        
        self.lbLocation.font = UIFont.zx_bodyFont
        self.lbLocation.textColor = UIColor.zx_textColorBody
        
        self.lbPlateTitle.font = UIFont.zx_bodyFont(UIFont.zx_bodyFontSize - 2)
        self.lbPlateTitle.textColor = UIColor.zx_textColorMark
        
        self.lbPlateNumber.font = UIFont.zx_bodyFont
        self.lbPlateNumber.textColor = UIColor.zx_textColorBody
        
        //相关额外信息
        self.ccvList.isUserInteractionEnabled = false
        self.ccvList.register(UINib.init(nibName: ZXTagsCCVCell.NibName, bundle: nil), forCellWithReuseIdentifier: ZXTagsCCVCell.reuseIdentifier)
        self.ccvList.delegate = self
        self.ccvList.dataSource = self
        self.ccvList.allowsSelection = false
        
        //剩余时间
        self.lbLeaveTime.font = UIFont.zx_bodyFont(UIFont.zx_bodyFontSize - 2)
        self.lbLeaveTime.textColor = UIColor.zx_textColorTitle
        
        //
        //self.reloadShowType(.markShare)
        
        //操作按钮
        self.btnControlAction.layer.cornerRadius = 15
        self.btnControlAction.layer.borderColor = UIColor.zx_tintColor.cgColor
        self.btnControlAction.layer.borderWidth = 1.0
        self.btnControlAction.setTitleColor(UIColor.zx_tintColor, for: .normal)
        self.btnControlAction.titleLabel?.font = UIFont.zx_titleFont(11)
        //
        self.btnMark.layer.cornerRadius = 14
        self.btnMark.layer.borderColor = UIColor.zx_tintColor.cgColor
        self.btnMark.layer.borderWidth = 1.0
        self.btnMark.setTitleColor(UIColor.zx_tintColor, for: .normal)
        self.btnMark.titleLabel?.font = UIFont.zx_titleFont(11)
        //

    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
    }

    override func setSelected(_ selected: Bool, animated: Bool) {
        super.setSelected(selected, animated: animated)

        // Configure the view for the selected state
    }
    
    fileprivate var taskModel: ZXTaskModel?
    fileprivate var tagsList = [false, false, false, false, false]
    
    /// ReloadUI
    ///
    /// - Parameters:
    ///   - model: TaskModel
    ///   - canControl: 是否可操作数据
    ///   - inDetail:   任务详情中
    func reloadData(model: ZXTaskModel?, canControl: Bool = false,inDetail: Bool = false) {
        self.headerInfoView.isHidden = true
        self.carTypeInfoView.isHidden = true
        self.carPlateInfoView.isHidden = true
        self.carKeysInfoView.isHidden = true
        self.controlView.isHidden = true
        self.markShareView.isHidden = true
        self.taskModel = model
        if let model = model {
            tagsList = model.zx_extralTags
            self.ccvList.reloadData()
            self.headerInfoView.isHidden = false
            self.carTypeInfoView.isHidden = false
            self.carPlateInfoView.isHidden = false
            self.carKeysInfoView.isHidden = false
            if model.isFollow == 1 {//已关注
                self.btnMark.setImage(nil, for: .normal)
                self.btnMark.setTitle("取消关注", for: .normal)
            } else {
                self.btnMark.setImage(#imageLiteral(resourceName: "add"), for: .normal)
                self.btnMark.setTitle("关注", for: .normal)
            }
            if inDetail {
                self.leftOffset.constant = 0
                self.rightOffset.constant = 0
                self.vLine.isHidden = true
                self.lbStatus.text = "任务信息"
                self.lbStatus.textColor = UIColor.zx_textColorTitle
                self.lbAgentPrice.textColor = UIColor.zx_textColorTitle
            } else {
                self.zxContentView.layer.masksToBounds = false
                self.zxContentView.layer.cornerRadius = 5
                self.zxContentView.layer.shadowOffset = CGSize(width: 0, height: 0)
                self.zxContentView.layer.shadowOpacity = 0.15
                self.zxContentView.layer.shadowRadius = 5
                
                self.leftOffset.constant = 10
                self.rightOffset.constant = 10
                self.vLine.isHidden = false
                self.lbStatus.text = model.zx_statusInfoInList
                self.lbStatus.textColor = UIColor.zx_tintColor
                if canControl {
                    if model.zx_hasUploadAuthority {//待付款 前端无后续操作
                        self.controlView.isHidden = false
                    } else {
                        self.controlView.isHidden = true
                    }
                } else {
                    self.markShareView.isHidden = false
                }
                self.lbAgentPrice.textColor = UIColor.zx_customAColor
            }
            //状态 代理费
            self.lbAgentPrice.text = "\(model.actualAmount)".zx_priceString(true, true) + "代理费"
            
            //品牌类型
            self.lbCarTypeInfo.text = model.carBrand
            //归属地 车牌
            self.lbLocation.text = "\(model.provinceName) \(model.cityName)"
            if inDetail, !model.otherMatched {
                self.lbPlateNumber.text = "\(model.plateNumber)"
            } else {
                self.lbPlateNumber.text = "\(model.plateNumberStr)"
            }
            
            //任务剩余时间
            if model.taskRemainingTimeStr.isEmpty {
                self.lbLeaveTime.text = ""
            } else {
                self.lbLeaveTime.text = "任务剩余时间:\(model.taskRemainingTimeStr)"
            }
            
        }
    }
    
    //ShowTipsAction
    
    
    @IBAction func showCarTypePopTips(_ sender: UIButton) {
        if let model = taskModel {
            var frame = self.convert(sender.frame, to: ZXRootController.appWindow()!)
            frame.origin.y += 60
            ZXPopTipsViewController.showTips(model.carBrand, from: frame)
        }
    }
    
    @IBAction func showBelongingPlacePopTIps(_ sender: UIButton) {
        if let model = taskModel {
            var frame = self.convert(sender.frame, to: ZXRootController.appWindow()!)
            frame.origin.y += 120
            ZXPopTipsViewController.showTips("\(model.provinceName) \(model.cityName)", from: frame)
        }
    }
    
    @IBAction func showPlateNumPopTips(_ sender: UIButton) {
    }
    
    
    
    fileprivate var inputPlateNumber: String?
    
    //MARK: - Action
    //MARK: - Mark/UnMark
    @IBAction func markAction(_ sender: Any) {
        if let model = self.taskModel {
            delegate?.zxTaskTableViewCell(self, mark: (model.isFollow == 1) ? false : true, model: self.taskModel)
        }
    }
    //MAKR: - Share
    @IBAction func shareAction(_ sender: Any) {
        delegate?.zxTaskTableViewCellShareAction(self, model: self.taskModel)
    }
    //MARK: - Consummate Info
    @IBAction func controlAction(_ sender: Any) {
        if let model = taskModel {
            if model.zx_controlType == .verifyCarInfo {
                if !ZXTaskDetailViewController.fromCarMatch {//需要验证车牌
                    NotificationCenter.default.addObserver(self, selector: #selector(plateCheckedNotice(_:)), name: ZX_PlateChecked_Notice.zx_noticeName(), object: nil)
                    let checkvc = ZXTakePhotoPageViewController()
                    ZXTakePhotoPageViewController.checkType = .verify
                    ZXTakePhotoPageViewController.taskId = model.taskId
                    ZXRootController.selectedNav().present(checkvc, animated: true, completion: nil)
                } else {
                    delegate?.zxTaskTableViewCell(self, controlActionType: model.zx_controlType, model: model, inputPlateNumber: self.inputPlateNumber)
                }
            } else {
                delegate?.zxTaskTableViewCell(self, controlActionType: model.zx_controlType, model: model, inputPlateNumber: nil)
            }
        }
    }
    
    @objc func plateCheckedNotice(_ notice: NSNotification) {
        if let obj = notice.object as? Dictionary<String, Any>, let taskId = obj["taskId"] as? String {
            if let model = taskModel, model.taskId == taskId {
                self.inputPlateNumber = obj["inputPlateNumber"] as? String
                NotificationCenter.default.removeObserver(self, name: ZX_PlateChecked_Notice.zx_noticeName(), object: nil)
                delegate?.zxTaskTableViewCell(self, controlActionType: model.zx_controlType, model: model, inputPlateNumber: self.inputPlateNumber)                
            }
        }
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self, name: ZX_PlateChecked_Notice.zx_noticeName(), object: nil)
    }
}

extension ZXTaskTableViewCell: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return tagsTitle.count
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let textSize = tagsTitle[indexPath.row].zx_textRectSize(toFont: UIFont.zx_bodyFont(UIFont.zx_bodyFontSize - 3), limiteSize: CGSize.init(width: ZXBOUNDS_WIDTH - 40, height: 20))
        return CGSize.init(width: (5 + 20 + 5 + textSize.width + 10), height: 20)
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ZXTagsCCVCell.reuseIdentifier, for: indexPath) as! ZXTagsCCVCell
        cell.setName(tagsTitle[indexPath.row], own: self.tagsList[indexPath.row])
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 5
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 5
    }
}
