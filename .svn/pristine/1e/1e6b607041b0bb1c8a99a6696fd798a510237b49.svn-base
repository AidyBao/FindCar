//
//  ZXMessageViewController+TableView.swift
//  FindCar
//
//  Created by 120v on 2018/1/8.
//  Copyright © 2018年 screson. All rights reserved.
//

import UIKit

extension ZXMessageViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var msgListModel: ZXMsgListModel = ZXMsgListModel()
        if dataList.count > 0 {
            msgListModel = dataList[indexPath.section]
        }
        
        switch msgListModel.type {
        case 1:
            let noticCell: ZXMessageImgCell = tableView.dequeueReusableCell(withIdentifier: ZXMessageImgCell.ZXMessageImgCellID, for: indexPath) as! ZXMessageImgCell
            let noticModel = msgListModel.notice
            noticCell.loadData(noticModel)
            return noticCell
        case 2:
            let taskCell: ZXTaskTableViewCell = tableView.dequeueReusableCell(withIdentifier: ZXTaskTableViewCell.reuseIdentifier, for: indexPath) as! ZXTaskTableViewCell
            taskCell.delegate = self
            let taskModel = msgListModel.task
            taskModel.messageTitle = msgListModel.messageTitle
            taskCell.reloadData(model: taskModel, type: .inMessageList)
            return taskCell
        default:
            return UITableViewCell.init()
        }
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return dataList.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
}

extension ZXMessageViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        var msgListModel: ZXMsgListModel?
        if dataList.count > 0 {
            msgListModel = dataList[indexPath.section]
        }
        if msgListModel?.type == 1 {
            let notModel = msgListModel?.notice
            if notModel?.noticeId != -1 {
                requestForMsgDetail((notModel?.noticeId)!)
            }else{
                ZXHUD.showFailure(in: self.view, text: "暂无内容", delay: ZX.HUDDelay)
            }
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        var msgListModel: ZXMsgListModel = ZXMsgListModel()
        if dataList.count > 0 {
            msgListModel = dataList[indexPath.section]
        }
        var cellH: CGFloat = 0
        if msgListModel.type == 2 {
            cellH = ZXTaskTableViewCell.msgHeight
        }else {
            cellH = 165.0
        }
        return cellH
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        if section == 0 {
            return 50.0
        }
        return 40.0
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return CGFloat.leastNormalMagnitude
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        
        var headerViewH: CGFloat = 0
        if section == 0 {
            headerViewH = 50.0
        }else{
            headerViewH = 40.0
        }
        let headerView: UIView = UIView.init(frame: CGRect.init(x: 0, y: 0, width: ZXBOUNDS_WIDTH, height: headerViewH))
        headerView.backgroundColor = UIColor.zx_subTintColor
        
        let timeLB: UILabel = UILabel.init(frame: CGRect.init(x: 0, y: 0, width: 130, height: 23))
        timeLB.layer.cornerRadius = 4.0
        timeLB.layer.masksToBounds = true
        timeLB.backgroundColor = UIColor.zx_colorRGB(194, 202, 212, 1.0)
        timeLB.textAlignment = .center
        timeLB.centerX = headerView.centerX
        if section == 0 {
            timeLB.centerY = headerView.centerY
        }else{
            timeLB.centerY = headerView.centerY - 5
        }
        timeLB.font = UIFont.zx_markFont
        timeLB.textColor = UIColor.white
        headerView.addSubview(timeLB)
        
        var msgListModel: ZXMsgListModel?
        if dataList.count > 0 {
            msgListModel = dataList[section]
        }
        timeLB.text = msgListModel?.sendTimeStr
        
        return headerView
    }
}

extension ZXMessageViewController: ZXTaskTableViewCellDelegate {
    
    func zxTaskTableViewCellShareAction(_ cell: ZXTaskTableViewCell, model: ZXTaskModel?) {
        if model != nil {
            ZXShare.shareToWX(taskModel: model!, wxScene: WXSceneSession)
        }
    }
    
    func zxTaskTableViewCell(_ cell: ZXTaskTableViewCell, mark: Bool, model: ZXTaskModel?) {
        ZXHUD.showLoading(in: self.view, text: ZX_LOADING_TEXT, delay: ZX.HUDDelay)
        ZXFocusCenter.requestForUpdateFocus(focusId: Int((model?.taskId)!)!, taskStatus: mark ? 1 : 0, completion: { (code, succ, str) in
            ZXHUD.hide(for: self.view, animated: true)
            if code == ZXAPI_SUCCESS {
                let succStr = mark ? "已关注" : "已取消关注"
                ZXHUD.showSuccess(in: self.view, text: succStr, delay: ZX.HUDDelay)
                let indexPath = self.tabList.indexPath(for: cell)
                if self.dataList.count > 0 {
                    let msgListModel = self.dataList[(indexPath?.section)!]
                    let taskModel = msgListModel.task
                    taskModel.isFollow = mark ? 1 : 0
                    self.tabList.reloadData()
                }
            }else{
                let errStr = mark ? "已关注" : "已取消关注"
                ZXHUD.showSuccess(in: self.view, text: errStr, delay: ZX.HUDDelay)
            }
        })
    }
}
