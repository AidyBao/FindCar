//
//  ZXUserModel.swift
//  FindCar
//
//  Created by 120v on 2017/12/27.
//  Copyright © 2017年 screson. All rights reserved.
//

import UIKit
import HandyJSON

typealias ZXEmpty = () -> Void

class ZXUserModel: HandyJSON {
    fileprivate var id: Int = -1
    fileprivate var token: String = ""
    
    var branchId: Int = -1
    var carCompanyId: Int = -1
    var carCompanyName: String = ""
    var registeredTel: String = ""
    var invitationCode: String = ""
    var uploadImgTimes: String = ""
    var getTaskNumber: Int  = 0
    var finishTaskNumber: Int  = 0
    var sumTaskPrice: String = ""
    var appVersion: String = ""
    var mobileModel: String = ""
    var mobileSystemType: String = ""
    var mobileSystemVersion: String = ""
    var mobileManufacturers: String = ""
    var deviceToken: String = ""
    var remark: String = ""
    var status: Int = 0
    var operatorId: Int = -1
    var operatorName: String = ""
    var operationTime: TimeInterval = 0
    var operationTimeStr: String = ""
    var companyStatus: String = ""
    
    required init() {}

    //id
    var memberId:String {
        get {
            #if DEBUG
//                return "6"
            #endif
            if id <= 0 {
                var random = arc4random() %  9999
                if random == 0 {
                    random = 1
                }
                return "-\(random)"
            }
            return "\(id)"
        }
    }
    //token
    var userToken:String {
        get {
            #if DEBUG
//                return "a7a4c3d90250564b22b880e52a1ccd9c"
            #endif
            if token.isEmpty {
                return NSUUID.init().uuidString
            }
            return token
        }
    }
    
    var isLogin: Bool {
        get {
            #if DEBUG
//                return true
            #endif
            if self.valid,id > 0 {
                return true
            }
            return false
        }
    }
    
    
    func save(_ dic:[String:Any]?) {
        if let dic = dic {
            var tempDic = dic
            
            //更新model
            let user = ZXUserModel.deserialize(from: dic)
            if let uid = tempDic["id"] as? Int {
                user?.id = uid
            }
            if let token = tempDic["token"] as? String {
                user?.token = token
            }
            ZXUser.zxuser = user
            
            //保存数据
            var dic2 = user?.toJSON()
            dic2!["id"] = tempDic["id"]
            dic2!["token"] = tempDic["token"]
            UserDefaults.standard.set(dic2, forKey: "ZXUser")
            UserDefaults.standard.synchronize()
            if ZXUserModel.lastTel.count > 0,user?.registeredTel != ZXUserModel.lastTel {
                //切换用户登录
                NotificationCenter.zxpost.accountChanged()
            }
            self.saveLastUserTel(user?.registeredTel)
        }
    }
    
    func sync() {
        if ZXUser.user.id >= 0 {
            var dic2 = ZXUser.user.toJSON()
            dic2?["userId"] = ZXUser.zxuser?.id
            dic2?["token"] = ZXUser.zxuser?.token
            UserDefaults.standard.set(dic2, forKey: "ZXUser")
            UserDefaults.standard.synchronize()
        }
    }
    
    func getUser() {
        if let dic = UserDefaults.standard.value(forKey: "ZXUser") as? [String:Any] {
            ZXUser.zxuser = ZXUserModel.deserialize(from: dic)
            if let uid = dic["id"] as? Int {
                ZXUser.user.id = uid
            }
            if let token = dic["token"] as? String {
                ZXUser.user.token = token
            }
        }
    }
    
    static var lastTel = "" //判断用户切换
    fileprivate var valid = true
    
    func invalid() {
        ZXUserModel.lastTel = self.registeredTel
        self.valid = false
    }
    
    func logout() {
        ZXUser.zxuser = nil
        UserDefaults.standard.removeObject(forKey: "ZXUser")
        UserDefaults.standard.synchronize()
    }
    
    fileprivate func saveLastUserTel(_ tel:String?) {
        if let tel = tel,tel.count > 0 {
            UserDefaults.standard.set(tel, forKey: "ZXLASET_USER_TEL")
            UserDefaults.standard.synchronize()
        }
    }
    
    static func lasetUserTel() -> String? {
        if let tel = UserDefaults.standard.object(forKey: "ZXLASET_USER_TEL") as? String {
            return tel
        }
        return nil
    }
}

class ZXUser: NSObject {
    fileprivate static var zxuser:ZXUserModel?
    static var user:ZXUserModel {
        get {
            if let _user = zxuser {
                return _user
            } else {
                zxuser = ZXUserModel()
            }
            return zxuser!
        }
    }
    
    @discardableResult static func checkLogin(_ callBack:ZXEmpty? = nil) -> Bool {
        if user.isLogin {
            callBack?()
            return true
        } else {
            ZXLoginViewController.show({
                callBack?()
            })
        }
        return false
    }
    
    //MARK: - 自动登录（7天内）
    class func zx_AutoLogin(callBack:((_ isAuto: Bool) ->Void)?) {
        if ZXUser.user.isLogin {
            let dateFormatter = DateFormatter()
            dateFormatter.dateFormat = "YYYY-MM-dd HH:mm:ss"
            dateFormatter.locale = Locale.current
            
            //上次时间
            var lastDateStr: String = ""
            var lastDate: Date?
            if UserDefaults.standard.object(forKey: "ZXLastDate") != nil {
                lastDateStr = UserDefaults.standard.object(forKey: "ZXLastDate") as! String
                lastDate = dateFormatter.date(from: lastDateStr)!
            }
            
            //目前时间
            let currentDateStr = ZXDateUtils.current.dateAndTime(false, timeWithSecond: true)
            let currentDate = dateFormatter.date(from: currentDateStr)
            
            if lastDate != nil {
                //时间差
                let interval = currentDate?.timeIntervalSince(lastDate!)
                
                //7天后需要从新登录
                let requerTime = TimeInterval(7*24*60*60)
                
                if Int(interval!) < Int(requerTime) { //自动登录
                    callBack?(true)
                }else{//从新登录
                    callBack?(false)
                }
            }else{
                callBack?(true)
            }
            UserDefaults.standard.set(currentDateStr, forKey: "ZXLastDate")
            UserDefaults.standard.synchronize()
        }else{
            callBack?(false)
        }
    }
}

