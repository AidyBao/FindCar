//
//  ZXBannerView.swift
//  Test
//
//  Created by 120v on 2018/1/29.
//  Copyright © 2018年 MQ. All rights reserved.
//

import UIKit

//MARK: - ZXBannerCell
class ZXBannerCell: UICollectionViewCell {
    
    static let ZXBannerCellID:String = "ZXBannerCell"
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        backgroundColor = UIColor.clear
        imgView.backgroundColor = UIColor.clear
        addSubview(imgView)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
        imgView.frame = self.bounds
    }
    
    func loadData(_ urlStr:String) {
        self.imgView.kf.setImage(with: URL.init(string: urlStr), placeholder: nil, options: nil, progressBlock: nil, completionHandler: nil)
    }
    
    lazy var imgView: UIImageView = {
        let img = UIImageView()
        img.contentMode = .scaleAspectFill
//        img.clipsToBounds = true
        return img
    }()
}

 typealias ZXBannerCompletion = (_ bannerView: ZXBannerView, _ itemIndex: Int,_ urlStr: String) -> ()
//MARK: - ZXBannerView
class ZXBannerView: UIView {
    
    var block: ZXBannerCompletion?
    var offSetX: CGFloat = 0.0
    
    private func checkImageUrlsIsIllegal(_ arr: Array<String>) {
        for url in arr {
            if !url.hasPrefix("http://") && !url.hasPrefix("https://") {
                print("image url format is error, please check it")
            }
        }
    }
    
    override init(frame: CGRect) {
        
        super.init(frame: frame)

        backgroundColor = UIColor.clear
        
        setUI()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    //MARK: - UI
    func setUI() {
        //
        addSubview(collView)
        
        //
        addSubview(sliderView)
        
        //
        sliderView.addSubview(slider)
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
        //
        collView.frame = CGRect.init(x: 0, y: 0, width: self.frame.width, height: self.frame.height - 4.0)
        //
        let sliderW: CGFloat = self.frame.width / CGFloat(imgUrls.count)
        sliderView.frame = CGRect.init(x: 0, y: collView.frame.maxY, width: self.frame.width, height: 4.0)

        //
        slider.frame = CGRect.init(x: offSetX, y: 0, width: sliderW, height: 4.0)
    }
    
    func loadData(_ dataArr: Array<String>,_ defIdx: Int) {
        guard dataArr.count > 0 else {
            print("image urls count is 0")
            return
        }
        checkImageUrlsIsIllegal(dataArr)
        imgUrls = dataArr
        let sliderW: CGFloat = self.frame.width / CGFloat(imgUrls.count)
        offSetX = sliderW*CGFloat(defIdx)
        layoutSubviews()
        collView.reloadData()
    }
    
    //MARK: - Lazy
    lazy var collView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        layout.minimumLineSpacing = 0
        layout.minimumInteritemSpacing = 0
        let coll = UICollectionView.init(frame: CGRect.zero, collectionViewLayout: layout)
        coll.delegate = self
        coll.dataSource = self
        coll.isPagingEnabled = true
        coll.showsHorizontalScrollIndicator = false
        coll.indicatorStyle = .white
        coll.backgroundColor = UIColor.clear
        coll.register(ZXBannerCell.self, forCellWithReuseIdentifier: ZXBannerCell.ZXBannerCellID)
        return coll
    }()
    
    lazy var sliderView: UIView = {
        let slider = UIView()
        slider.backgroundColor = UIColor.zx_colorWithHexString("#a3a9b3")
        return slider
    }()
    
    lazy var slider: UIView = {
        let slid = UIView()
        slid.backgroundColor = UIColor.zx_tintColor
        return slid
    }()
    
    lazy var imgUrls: Array<String> = {
        let imgs = Array<String>.init()
        return imgs
    }()
}

//MARK: - UICollectionViewDataSource
extension ZXBannerView: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return imgUrls.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell: ZXBannerCell = collectionView.dequeueReusableCell(withReuseIdentifier: ZXBannerCell.ZXBannerCellID, for: indexPath) as! ZXBannerCell
        if imgUrls.count > 0 {
            cell.loadData(imgUrls[indexPath.row])
        }
        return cell
    }    
}

//MARK: - UICollectionViewDelegate
extension ZXBannerView: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let index = indexPath.item % imgUrls.count
        if imgUrls.count > 0 {
            let urlStr = imgUrls[indexPath.row]
            if block != nil {
                block?(self, index, urlStr)
            }
        }
    }
}

//MARK: - UICollectionViewDelegateFlowLayout
extension ZXBannerView: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize.init(width: collectionView.width, height: collectionView.height)
    }
}

//MARK: - UIScrollViewDelegate
extension ZXBannerView: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        // 滑条滚动
        let itemWidth = scrollView.width / CGFloat(imgUrls.count)
        let xoffset = (itemWidth / scrollView.width) * scrollView.contentOffset.x
        UIView.animate(withDuration: 0.25) {
            self.slider.x = xoffset
        }
    }
}



