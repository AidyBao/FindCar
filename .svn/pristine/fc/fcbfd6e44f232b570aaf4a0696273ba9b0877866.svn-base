//
//  ZXVerificationCodeViewController.swift
//  FindCar
//
//  Created by 120v on 2017/12/27.
//  Copyright © 2017年 screson. All rights reserved.
//

import UIKit

class ZXVerificationCodeViewController: UIViewController {
    
    @IBOutlet weak var titleLB: UILabel!
    @IBOutlet weak var telLB: UILabel!
    @IBOutlet weak var inputLB: UILabel!
    @IBOutlet weak var getVerCode: ZXCountDownButton!
    var verCodeView: ZXVerifivationCodeView?
    
    var verCode: String = ""
    var tel:     String = ""
    var isNew:   String = ""
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setUIStyle()
        
        addVerCodeView()
        
        addCountDownBtn()
        
        //监听从后台返回前台是时间变化
        NotificationCenter.default.addObserver(self, selector: #selector(refreshDate), name: ZXNotification.UI.enterForeground.zx_noticeName(), object: nil)
    }
    
    func setUIStyle() {
        titleLB.textColor = UIColor.zx_textColorTitle
        titleLB.font = UIFont.boldSystemFont(ofSize: 29.0)
        
        telLB.textColor = UIColor.zx_textColorTitle
        telLB.font = UIFont.boldSystemFont(ofSize: 29.0)
        
        inputLB.textColor = UIColor.zx_textColorTitle
        inputLB.font = UIFont.boldSystemFont(ofSize: 19.0)
        
        getVerCode.setTitleColor(UIColor.zx_textColorTitle, for: .normal)
        getVerCode.titleLabel?.font = UIFont.systemFont(ofSize: 19.0)
    }
    
    func addCountDownBtn() {
        getVerCode.maxCount = 60
        getVerCode.start()
    }
    
    //MARK: - 输入框
    func addVerCodeView() {
        verCodeView = ZXVerifivationCodeView.init(frame: CGRect.init(x: 22, y: getVerCode.frame.maxY + 30.0, width: 264, height: 50.0), number: 4, margin: 10)
        verCodeView?.delegate = self
        view.addSubview(verCodeView!)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
    }

    @IBAction func backAction(_ sender: UIButton) {
        getVerCode.reset()
        navigationController?.popViewController(animated: true)
    }
    
    
    //MARK: - 重新获取验证码
    @IBAction func getVerCodeAction(_ sender: ZXCountDownButton) {
        verCodeView?.cleanVerificationCodeView()
       
        requestForGetCode()
    }
    
    //MARK: - 监听从后台返回前台是时间变化
    @objc func refreshDate() {
        if getVerCode.isCouting,ZXGlobalData.inoutCount > 0,getVerCode.currentCount > 0 {
            var temp = getVerCode.currentCount - ZXGlobalData.inoutCount
            temp = temp < 0 ? 0 : temp
            getVerCode.maxCount = temp
            getVerCode.start()
        }
    }
    
    //MARK: - 判断是否自动登录
    func judgeAutoLogoin() {
        if isNew == "0" {//未注册
            let invitVC = ZXInvitationCodeViewController()
            invitVC.tel = tel
            invitVC.verCode = verCode
            navigationController?.pushViewController(ZXInvitationCodeViewController(), animated: true)
        }else{//已注册
            ZXUser.zx_AutoLogin(callBack: { (isAuto) in
                if isAuto {//自动登录
                    ZXRouter.changeRootViewController(ZXRootController.zx_tabbarVC())
                }else{//重新登录
                    self.requestForLogin()
                }
            })
        }
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        
    }

    deinit {
        NotificationCenter.default.removeObserver(self, name: ZXNotification.UI.enterForeground.zx_noticeName(), object: nil)
    }
}

//MARK: - ZXVerifivationCodeViewDelegate
extension ZXVerificationCodeViewController: ZXVerifivationCodeViewDelegate {
    func didVerCodeFinished(codeView verCodeView: ZXVerifivationCodeView, verCode code: String) {
        if code == verCode {
            getVerCode.reset()
            
            requestForVerificationCode()
           
        }else{
            verCodeView.cleanVerificationCodeView()
        }
    }
}

//MARK: - Http
extension ZXVerificationCodeViewController {
    //MARK: - 获取验证码
    func requestForGetCode() {
        var dict: Dictionary<String,Any> = Dictionary()
        if tel.isEmpty == false {
            dict["tel"] = self.tel
        }
        ZXHUD.showLoading(in: self.view, text: "", delay: nil)
        ZXLoginManager.requestForGetCode(tel) { (success, status, content, errMsg) in
            ZXHUD.hide(for: self.view, animated: true)
            if status == ZXAPI_SUCCESS {
                if let codeStr = content["smsCode"],let isNew = content["isNew"] {
                    ZXHUD.showSuccess(in: self.view, text: "验证码已发送", delay: ZX.HUDDelay)
                    self.verCode = String(describing: codeStr)
                    self.isNew = String(describing: isNew)
                }
            }else{
                ZXNetwork.errorCodeParse(status, httpError: {
                    ZXHUD.showFailure(in: self.view, text: "连接失败请检查网络或重试", delay: ZX.HUDDelay)
                }, serverError: {
                    ZXHUD.showFailure(in: self.view, text: errMsg, delay: ZX.HUDDelay)
                })
                self.getVerCode.reset()
            }
        }
    }
    
    //MARK: - 校验验证码
    func requestForVerificationCode() {
        var dict: Dictionary<String,Any> = Dictionary()
        if tel.isEmpty == false {
            dict["tel"] = self.tel
        }
        
        if verCode.isEmpty == false {
            dict["verificationCode"] = verCode
        }
        
        ZXNetwork.asyncRequest(withUrl: ZXAPI.api(address: ZXAPIConst.User.verCode), params: dict, method: .post) { (succ, code, content, str, zxerror) in
            if succ {
                if code == ZXAPI_SUCCESS {
                    self.judgeAutoLogoin()
                }else{
                    ZXHUD.showText(in: self.view, text: "验证码过期,请重新获取", delay: ZX.HUDDelay)
                }
            }else{
                ZXHUD.showFailure(in: self.view, text: (zxerror?.errorMessage)!, delay: ZX.HUDDelay)
            }
        }
    }

    
    //MARK: - 登录
    func requestForLogin() ->Void{
        ZXHUD.showLoading(in: self.view, text: "登录中", delay: nil)
        ZXLoginManager.requestForLogin(tel, success: { (succ, code, content, errMsg) in
            ZXHUD.hide(for: self.view, animated: true)
            if code == ZXAPI_SUCCESS {
                ZXHUD.showSuccess(in: self.view, text: content["msg"] as! String, delay: ZX.HUDDelay)
                NotificationCenter.zxpost.loginSuccess()
                if let data = content["data"] as? Dictionary<String,Any> {
                    //保存用户登录信息
                    ZXUser.user.save(data)
                }
                //更新用户个人信息
                self.updateUserInfo()
                //
                self.changeRootController()
            }
        }) { (code, errMsg) in
            ZXHUD.showFailure(in: self.view, text: errMsg, delay: ZX.HUDDelay)
        }
    }
    
    func changeRootController() {
        ZXRouter.changeRootViewController(ZXRootController.zx_tabbarVC())
    }
    
    func updateUserInfo() {
        DispatchQueue.main.async {
            //1.获取设备信息
            ZXLoginManager.requestForEquipment()
        }
    }
}
